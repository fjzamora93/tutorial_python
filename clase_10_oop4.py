#PROGRAMACI√ìN ORIENTADA A OBJETOS ---> PARTE 4 (minuto 50)

"""
En esta parte de la clase entramos m√°s en profundidad en la utilidad de las Clases

raise ERROR es la funci√≥n para elevar nuestros propios errores en caso
de que algo no vaya como nosotros queramos.

"""


class Estudiante:
    def __init__(self, nombre, casa, patronus,charm):
        if not nombre:
            raise ValueError("Falta un nombre")    
        if casa not in ["griffindor", "hufflepuff", "ravenclaw", "slyherin"]:
            raise ValueError ("Casa no v√°lida ")               
        self.nombre=nombre 
        self.casa=casa
        self.patronus=patronus
        self.charm=charm                  

    def __str__(self):
        return f"{self.nombre} est√° en {self.casa}... y a√∫n no est√° el Patronus en el Str!!"
        #Hay que tener cuidado. Si no insertamos esta funci√≥n (str)
        #El int√©rprete no va a leer bien la clase.
        #Digamos que esta es la funci√≥n para darle un "formato" a self.
        

    def hechizo(self):
        match self.charm:
            case "aire":
                return "‚ö°"
            case  "hielo":
                return "‚ùÑÔ∏è"
            case "fuego":
                return "üî•"
            case "tierra":
                return "üçÄ"
            case "_":
                return "Hechizo desconocido"



def main():
    estudiante= get_estudiante()
    print (f"{estudiante}")
    print (estudiante.hechizo())  #->>>> MUCHO OJO. Aqu√≠ lo que estamos haciendo es LLAMAR LA FUNCI√ìN, no a la VARIABLE (como en el anterior).
                                    #Para llamar a una funci√≥n hay que incluir el (). De otra manera, Python entiende que es un ATRIBUTO del estudiante.

def get_estudiante():
    nombre= input ("Nombre: ") 
    casa= input ("Casa: ")
    patronus= input ("Patronus: ")
    charm=input ("Charm: ")
    return Estudiante(nombre,casa, patronus,charm)


if __name__ == "__main__":
    main()